import fs from "fs"
import { App, Component, createSSRApp, h } from "vue"
import { renderToString } from "vue/server-renderer"
import { LiveVueApp, LiveHook } from "./types"
import { migrateToLiveVueApp } from "./app"
import { mapValues } from "./utils"

type Components = Record<string, Component>

const mockLive: LiveHook = {
  el: {} as any,
  liveSocket: {} as any,
  pushEvent: () => 0,
  pushEventTo: () => 0,
  handleEvent: () => () => {},
  removeHandleEvent: () => {},
  upload: () => {},
  uploadTo: () => {},
  vue: {
    props: {},
    slots: {},
    app: {} as App<any>,
  },
}

export const getRender = (componentsOrApp: Components | LiveVueApp) => {
  const { resolve, setup } = migrateToLiveVueApp(componentsOrApp)

  return async (name: string, props: Record<string, any>, slots: Record<string, string>) => {
    const component = await resolve(name)
    const slotComponents = mapValues(slots, base64 => () => h("div", { innerHTML: atob(base64).trim() }))
    const app = setup({
      createApp: createSSRApp,
      component,
      props,
      slots: slotComponents,
      plugin: {
        install: (app: App) => {
          // we don't want to mount the app in SSR
          app.mount = (...args: any[]): any => undefined
          // we don't have hook instance in SSR, so we need to mock it
          app.provide("_live_vue", Object.assign({}, mockLive))
        },
      },
      el: {} as any,
      ssr: true,
    })

    if (!app) throw new Error("Setup function did not return a Vue app!")

    return renderToString(app)
  }
}
/**
 * Loads the manifest file from the given path and returns a record of the assets.
 * Manifest file is a JSON file generated by Vite for the client build.
 * We need to load it to know which files to preload for the given page.
 * @param path - The path to the manifest file.
 * @returns A record of the assets.
 */
export const loadManifest = (path: string): Record<string, string[]> => {
  const manifest = JSON.parse(fs.readFileSync(path, "utf8"))
  return mapValues(manifest, value => (Array.isArray(value) ? value : [value as string]))
}
